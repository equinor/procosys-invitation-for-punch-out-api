trigger: none

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'


# Global variables for the pipeline
variables:
 - template: templates/variables/ipo-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 - name: 'repositoryName'
   value: 'ipo/api'

 - name: 'versionNumber'
   value: '1.000.0.'

 - name: NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS
   value: 40
  
 - name: NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS
   value: 40

 - name: 'leaderElectorDockerImage'
   value: '${{ variables.containerRegistryName }}.azurecr.io/leader-elector:latest'

 - name: 'leaderElectorLeaseTime'
   value: '5'

name: '${{ variables.versionNumber }}$(Build.BuildId)-$(Date:MMddyyyy)'

stages:
# Run tests Stage
# - stage: runtests
#   displayName: 'Run tests'
#   variables:
#     envName: 'runtests'
#     envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
#     testPath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.IPO.sln'

  # jobs:
  # Run Test
  # - template: /templates/pipelines/runtest.yml@templates
  #   parameters:
  #     deploymentName: 'runtests'
  #     dependsOn: ''
  #     envGroup: '${{ variables.envGroupName }}'
  #     testPath: '${{ variables.testPath }}'

# Build stage. Docker build, tag and push
- stage: build
  displayName: 'Build'
  #dependsOn: 'runtests'
  variables:
    envName: 'build'
    envRg: '${{ variables.envRgName }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.env }}'
    dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnectionName }}'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.ProCoSys.IPO.WebApi/Dockerfile'

  jobs:
  # Docker Build
  - template: /templates/pipelines/dockerbuild-ipo.yml@templates
    parameters:
      deploymentName: 'docker_build'
      dependsOn: ''
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest')) # Remember to change back to eq instead of ne.
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: buildAndPush # Remember to change back to build.
      versionNumber: ${{ variables.versionNumber }}
      arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Docker Build (Master Only)
  - template: /templates/pipelines/dockerbuild-ipo.yml@templates
    parameters:
      deploymentName: 'docker_build_and_push_master_only'
      dependsOn: ''
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      envGroup: '${{ variables.envGroupName }}'
      arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
      buildCommand: buildAndPush
      versionNumber: ${{ variables.versionNumber }}
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Create Migration Script
  - template: /templates/pipelines/createsqlmigrate-ipo.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'create_migration_script'
      envGroup: '${{ variables.envGroupName }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'

  # Dev deploy stage
- stage: DeployDev
  displayName: 'Deploy to dev'
  dependsOn: 'Build' 
  #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/014953_radix')) 
  condition: succeeded()
  variables:
    envName: 'dev'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    
  jobs:
    - deployment: Deploy
      displayName: Migrate DB & deploy
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Run Migration Script (Predeploy)
              - template: templates/execute-db-migration.yml
                parameters:
                  dependsOn: ''      
                  deploymentName: 'run_migration_script'
                  envGroup: '${{ variables.envGroupName }}'
                  serviceConnection: '${{ variables.serviceConnection }}'
                  kvName: '${{ variables.commonKeyVault }}'
                  kvRgName: 'pcs-common-rg'
                  kvSecret: '${{ variables.sqlAdminUserName }}-${{ variables.envName }}'
                  serverName: '${{ variables.sqlServerName }}.database.windows.net'
                  databaseName: '${{ variables.sqlDatabaseName }}'      

              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  imageTagNameBackend: '${{ variables.versionNumber }}$(Build.BuildId)'
                  imageTagNameLeaderElector: ${{ variables.leaderElectorDockerImageTagName }}


