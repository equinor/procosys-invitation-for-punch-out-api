resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'



# Global variables for the pipeline
variables:
 - template: templates/variables/ipo-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 - name: 'repositoryName'
   value: 'ipo/api'

 - name: 'versionNumber'
   value: '1.000.0.'

 - name: NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS
   value: 40
  
 - name: NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS
   value: 40

 - name: 'leaderElectorDockerImage'
   value: '${{ variables.containerRegistryName }}.azurecr.io/leader-elector:latest'

 - name: 'leaderElectorLeaseTime'
   value: '5'

name: '${{ variables.versionNumber }}$(Build.BuildId)-$(Date:MMddyyyy)'

stages:
# Run tests Stage
- stage: runtests
  displayName: 'Run tests'
  variables:
    envName: 'runtests'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.envName }}'
    testPath: '$(Build.SourcesDirectory)/src/Equinor.Procosys.IPO.sln'

  jobs:
  # Run Test
  - template: /templates/pipelines/runtest.yml@templates
    parameters:
      deploymentName: 'runtests'
      dependsOn: ''
      envGroup: '${{ variables.envGroupName }}'
      testPath: '${{ variables.testPath }}'

# Build stage. Docker build, tag and push
- stage: build
  displayName: 'Build'
  dependsOn: 'runtests'
  variables:
    envName: 'build'
    envRg: '${{ variables.envRgName }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-api-${{ variables.env }}'
    dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnectionName }}'
    dockerfilePath: '$(Build.SourcesDirectory)/src/Equinor.ProCoSys.IPO.WebApi/Dockerfile'

  jobs:
  # Docker Build
  - template: /templates/pipelines/dockerbuild-ipo.yml@templates
    parameters:
      deploymentName: 'docker_build'
      dependsOn: ''
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      envGroup: '${{ variables.envGroupName }}'
      buildCommand: build
      versionNumber: ${{ variables.versionNumber }}
      arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Docker Build (Master Only)
  - template: /templates/pipelines/dockerbuild-ipo.yml@templates
    parameters:
      deploymentName: 'docker_build_and_push_master_only'
      dependsOn: ''
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      envGroup: '${{ variables.envGroupName }}'
      arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
      buildCommand: buildAndPush
      versionNumber: ${{ variables.versionNumber }}
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)/src'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '${{ variables.dockerRegistryServiceConnection }}'

  # Create Migration Script
  - template: /templates/pipelines/createsqlmigrate-ipo.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'create_migration_script'
      envGroup: '${{ variables.envGroupName }}'
      serviceConnection: '${{ variables.nonProdServiceConnection }}'


